【string】
前注："abcdefg"这种是字符串常量char*
==构造==
string s1("hello");
string s2(s1);
string s3(10,'a');//10个a，限单一字符
==赋值==
s1.assign("abcdefg");
s1.assign("abcdefg",3);//char*前3个字符，不可string！！
s1.assign(s2);
s1.assign(3,'a');//3个a，限单一字符
==拼接==
s1 += "asd";
s1 += s2;
s1.append(s2);
s1.append("abcdefg",4);//char*的前4个
s1.append(s2,4);//string的序4到最后，非前4个！！
s1.append(s2,3,4);//string的序3开始取4个
s1.append(s2,0,4);//string的前4个
==查找==没找到返回-1
s1.find("abc"/s2,3);//从序3开始char*/string首次出现的位置
s1.find("abc",3,2);//char*前2个字符在序3起首现位置，无string！
s1.rfind("abc",n-3);//从序n-4往左"abc"第1次出现的位置
其他略，反正就从右往左找
==替换==
s1.replace(3,5,"abc"/s2);//s1序3开始5个字符换成char*/string
-替换进去的长度无所谓，比如5个可以换成3个或者7个
==比较==
s1.compare("asdf"/s2);//s1同char*/string比较，依据ascii
==读写单字符==
读：s1[2]、s1.at(2)
写：s1[2]='x'、s1.at(2)='x'
==插入==
s1.insert(3,"asd"/s2);//在序3插入char*/string
==删除==
s1.erase(4,3);//序4开始删除3个
==子串==
s1=s2.substr(2,4);//序2开始4个字符

【vector】
类似数组，但是动态扩展，单端数组，
动态扩展：找个更大空间把原来的拷贝过去再释放原空间，而不后接
遍历和定位只能用迭代器，也就是iterator=a.begin()，
简称it，表示位置，只读迭代器：const_iterator
begin()左端，end()右+1，rbegin()右，rend()左-1，因为前闭后开
==构造和赋值==
vector<int> v1(n,elem);  //n个elem
v1=vector<int>( it1 , it2 );//总是前闭后开
v1.assign( it1 , it2 );
v1.assign(n,elem);  //n个elem
==容量和大小==
v1.empty();//空1，非空0
v1.size();//大小(元素个数)，大小<=容量
v1.capacity;//容量，当前物理内存有多大，一般会预留空间
v1.resize(n);//把大小弄成n，长则截断，短则填充(int默认0)
==插入和删除==
v1.push_back(1);//尾插
v1.pop_back();//尾删
v1.insert( it , elem );//在it位置插入elem
v1.insert( it , n , elem );//在it位置插入n个elem
v1.erase( it );//删除it位置的元素
v1.erase( it1 , it2 );//删除[it1,it2)的元素
v1.clear();//清空
==存取==
v1.front();//首个
v1.back();//末个
v1.at(k);//第k个
v1[k];//第k个
==互换==
v1.swap(v2);
用互换收缩空间，假设v1的容量是100，大小是3，可以：
vector<int>(v1).swap(v);//前者是一个匿名对象，容量跟大小相近
==预留空间==
vector<int> v1; v1.reserve(100);//不可访问，用来减少开辟次数
==遍历==
1. for( vector<int>::iterator it=v.begin() ; it!=v.end() ; it++){ }
2. for_each( v.begin() , v.end() , func );//第3个是回调函数
==排序==
只要是能随机访问的容器都可以sort，包括deque
#include<algorithm>
sort(it1,it2);//默认升序，排序[it1,it2)这一段，其余不变
#include<functional>
greater<int> g;//自带的一个函数对象
sort(it1,it2,g);//第3个是函数对象，实现降序，也可匿名对象

【deque】
双端数组，头部操作比vector方便，也能随机访问，
逻辑连续，物理不连续，访问速度慢于vector
==构造和赋值==
deque<int> d1n,elem);  //n个elem
deque<int> d1( it1 , it2 ); //拿[it1,it2)的元素
deque<int> d1(d2);//拷贝
d1.assign( it1 , it2 );//[it1,it2)
d1.assign(n,elem);  //n个elem
==大小==
d1.empty();  //空1，非空0
d1.size();  //d1的大小，没有容量的说法
d1.resize(n);  //多则删，少则补默认值，int是0
d1.resize(n,elem);  //设定填充值elem
==插入和删除==
push_front()，push_back()，pop_front()，pop_back()
d1.insert(it,elem); //在位置it插入elem
d1.insert(it,n,elem); //在位置it插入,个1elem
d1.insert(it,it1,it2);//在位置it插入[it1,it2)的元素，it1和it2要同目标
d1.erase(it1,it2);//删除[it1,it2)的元素，返回下个元素的it
d1.erase(it);//删除位置it的元素，返回下个元素的位置
d1.clear();//清空
==存取==
d1.front();//首个
d1.back();//末个
d1.at(k);//第k个
d1[k];//第k个

【stack和queue】
都不能遍历
栈：push(i)入、pop()出、top()顶、empty()空1、size()大小
队列：push(i)入、pop()出、front()首、back()末、empty()、size()

【list】
逻辑连续、物理不连续、双向循环链表、双向迭代器
遍历速度慢、占用空间大、不能随机读取it+3(只能.next()或it++)
修改链表不会影响原来生成的迭代器iterator
==构造和赋值==
list<int> l1( it1 , it2 ); //前闭后开
list<int> l1(n,elem);  //n个elem
l1.assign( it1 , it2 );
l1.assign(n,elem);  //n个elem
==大小==
l1.empty(); 
l1.size();
l1.resize(n);//调整成n个，填充默认值
l1.resize(n,elem);//调整成n个，填充elem
==插入和删除==
front()首个元素、back()尾个元素
push_back(i)、push_front(i)、pop_back()、pop_front()
l1.insert(it,elem);//在it位置插入元素elem，返回新数据的位置
l1.insert(it,elem);//在it位置插入n个元素elem，无返回值
l1.insert(it,it1,it2);//在位置it1插入[it1,it2)的元素
l1.clear();//清空
l1.erase(it);//删除位置it的元素
l1.erase(it1,it2);//前闭后开，删除元素
l1.remove(elem);//删除所有值=elem的元素
==反转和排序==
l1.reverse();//反转
l1.sort();//升序，不能用algorithm中的sort(it1,it2)
l1.sort( greater<int>() );//降序，匿名函数对象
l1.sort( mycmpA );//对类A自定义排序，普通bool函数mycmpA()

【set】
集合，插入元素时自动排序，关联式容器，底层二叉树
set插入重复元素无效，multiset可以
begin()首个,end()末个
构造：默认和拷贝
赋值：s1=s2;
空否：s1.empty();
大小：s1.size();  //不能重新指定
交换：s1.swap(s2);
插入：s1.insert(elem);  //只有这一种方法
清空：s1.clear()
删除：s1.erase(it); s1.erase(it1,it2); s1.erase(elem);
查找：s1.find(elem);//返回找到的位置，无则s1.end()
计数：s1.count(elem);//返回个数，set是0或1，multiset是自然数
指定插入元素时的排序规则：
set<A,MycmpA> s;
类A被排序；MycmpA是重载()的bool函数对象类名，不能是函数名或对象
class MycmpA{
public:
    bool operator()(const A& a1, const A& a2) const {
        return a1.q > a2.q;
    }
};

【pair】
对组，用来成对的返回数据
pair<string,int> p1;//前者是string，后者是int
前者 p1.first，后者 p1.second，俩成员变量
p1 = make_pair("asd",123); //用make_pair创建对子
p1 = pair<string,int>("asd",123); //用匿名对子
【map】
类似py的字典，first是键，second是值，
关联式容器，底层二叉树，插入时自动排序
map插入重复键无效，重复值可以；multimap可以重复键
构造：map<string,int> m1; //分别是键和值的数据类型
空否：m1.empty()
大小：m1.size()
交换：m1.swap(m2);
插入：m1.insert(p1); //每个元素都得是pair类型
删除：m1.erase(it); m1.erase(elem);//删位置it或键为elem的元素
修改：m[elem]=?; //修改键为elem的值，也可用于插入和读取
读取：it->first; (*it).second; //用->和*都可以
查找：it=m.find(elem); //差键elem，返回位置给it
计数：m1.count(elem); //统计键为elem的个数，map只能0或1
multimap：键重复，值任意，可以键值完全一样，算2个元素
自定义排序：
map<string,int,Mycmp> m;//前两个类名跟前面一样
第3个类名也是重载()的bool返回值函数对象类的类名，和set一样


