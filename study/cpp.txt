c++里 const 的变量也是在不可修改的区

【分文件】
.h文件函数声明
.cpp源文件函数实现

【枚举】
enum Xxx{ x1,x2,x3 };//定义类型
enum Xxx x=x1;//定义变量

【引用】
int& re = a;//re是a的引用
&只有 数据类型& 这个情况下不是取地址
引用不能修改，即便后面re=b;也不能修改b
re=b;的效果是a=b; 把b的值给a
不能int& re2;引用一定要初始化，跟常量一样
可以对引用再引用，即int& re1 = re;//re1也是a
用处1：实现指针的功能
void f(int &r){ r=30 };//r是a的引用，
a=100; f(a);  //此时a==30了 
让形参是实参的引用，就能直接改外部的值了
用处2：返回自己这个对象，
比如A是一个类，可以A& fun(){ return *this }用来链式操作

一个引用和const的注意点：
如果const int a =10;不能int &re =a;
应当const int & re = a;
给常量引用时，必须用const引用，const安全性高
但如果变量没有const，也可以用const引用
int b=20; const int &re=b;
可以b=30; 不可以re=30;一般用于形参防止误操作修改

【new操作符】
int *p = new int(10);//堆区有个值为10的数据，返回地址
int *p = new int[10];//创建10个数的数组，后续赋值
释放：前者delete p; 后者delete []p;

【函数参数】
默认参数：int fun(int a,int b=1){}
1. 默认的要放在不默认的后面
2. 函数声明和函数实现，只能其中一个有默认参数。
占位参数：int fun(int a,int ){}
1. 必须传入参数
2. 可以有默认参数 int =10，这时不用传入了
3. 怎么用？

【函数重载】
条件：
1. 在同一个作用域且函数名称相同，
2. 函数参数的 类型/个数/顺序 不同
3. 只有返回值类型不同，不可重载
注意：
1. 重载与引用：有无const可作为重载条件
void fun(int &a){}  //要int a=10;fun(a);
void fun(const int &a){} //可以fun(10)
能修改的a按上者，不能修改的按下者
2. 重载与默认参数：不行，默认参数不计数
void fun(int a){}
void fun(int a,int b=10){}

【类class】
权限：
公共public：类内外都能访问
保护protected：类外不能访问，能继承
私有private：类外不能访问，不能继承

结构体struct和class的区别：
默认权限：前者public后者private

私有化的好处：
1.控制读写权限
2.对于写，可以检测数据的有效性，if判断

【构造函数和析构函数】
用于初始化，编译器自动调用，编译器提供空实现的(大括号里没东西)

构造函数：类名(){  }
1.没有返回值也不写void
2.函数名和类名一样
3.可以有参数， 可以重载
4.调用 对象时自动调用，不用手动，且只会调用一次

析构函数：~类名(){  }
1.没有返回值也不写void
2.函数名是  ~类名
3.没有参数， 不可以重载
4.销毁 对象时自动调用，不用手动，且只会调用一次

默认构造函数、默认析构函数、默认拷贝构造函数，这3个编译器自动添加
若自定义了有参构造，不自动添加默认无参构造，但仍会添加默认拷贝构造，若自定义了拷贝构造，另外两个都不自动添加

A类作为B类的成员，顺序：构造A-构造B-析构B-析构A

在“传入形参”和“值的方式返回对象”时会进行拷贝构造

有堆区内存的成员变量时要引用传给形参，否则会被释放。

可以用空对象指针调用成员函数：
A* p = NULL; p->fun();//fun()是类A的一个成员函数
为了不让空指针来调用，可以进行if( this!=NULL )的判断

【初始化列表】
Stu() :q1(10), q2(20), q3(30) {}  //默认
Stu(int a, int b, int c) :q1(a), q2(b), q3(c) {}  //有参

【静态成员】
空对象占用内存空间：1
每个空对象都有自己的空间，大小都是1
只有 非静态成员变量 属于类的对象，这时候那个1就不要算进去了
静态成员变量，非静态成员函数，静态成员函数，这三者都不属于
静态成员函数可以访问静态成员变量 ，不能访问非静态成员变量
静态成员变量，类内生声明，类外初始化，所有对象共享一份数据
声明： static int q;   初始化： int A::q = 0;
静态成员变量/函数可以通过对象或者类名访问：a.q;或者A::fun();

【深拷贝和浅拷贝】
对于堆区的数据，默认的拷贝构造函数是浅拷贝不重新开辟内存，而是复制地址。
所以浅拷贝会导致重复释放堆区数据，所以需要自己写一个深拷贝的拷贝构造。
在析构函数里释放内存

【常函数和常变量】
常函数：void fun const{...}
常函数不能改变 无mutable 修饰的变量的值
this在普通函数中的本质是 Stu* const this，不可修改指向
this在常函数中是const Stu* const this，指向和指向的值均不可修改
常对象：const Stu s1;
常对象的 无mutable 修饰的值也不能改变
常对象只能调用常函数
this一般用于解决名字冲突，this->a=a; 后面的a是输入的形参


【友元】
友元可以访问private里的东西，三个方式：
friend void func(); //全局函数
friend class A; //另一个类
friend void A::fun(); //注意声明和摆放顺序

【继承】
class 子类 : 继承方式 父类 {};
继承方式：
公共public：除了private的，其他全照搬
保护protected：除了private的，其他全拿来并变成protected
私有private：除了private的，其他全拿来并变成private
原本private的怎么都不会被继承，访问权限最低是继承方式

继承时候构造和析构的顺序：父类构造-子类构造-子类析构-父类析构

继承同名静态成员
B继承自A，b是实例对象，xx是变量a或函数fun()
通过对象：b.xx、b.A::xx
通过类名：B::xx、B::A::xx
注：子类会把父类中跟子类同名的所有成员隐藏掉，要访问就要B::A::xx
其1，第一个::表示通过类名来访问，第二个::表示访问父类作用域下
其2，上面说的所有，包括函数重载的，只要名字一样，不管有无参都隐藏

继承含同名非静态成员的多个父类：
B继承自A1(含q,w)和A2(含q,e)
b.w; b.e; b.A1::q; b.A2::q;

菱形继承：A->B1,B2->C，其中A有变量q
二义性：通过作用域来区分
虚继承：关键词virtual
底层技术：vbptr虚基类指针，vbtable虚基类表上有说明指向哪儿
用了虚继承之后，就是继承了两个指针，指向同一个东西
用法：
class  B1 :virtual public A {};
class  B2 :virtual public A {};
class C :public B1, public B2 {};
c.q 和 c.B1::q 和 c.B2::q 这三者是同一个数据，c.q在非虚继承时会报错

【多态】
动态多态的条件：1.继承，2.函数重写
早绑定和晚绑定：
父类的函数没有virtual时是早绑定，编译阶段确定地址，子类重写无效
virtual void fun(){ }后，原来A的虚函数的地址被重写的函数地址替换

纯虚函数：virtual 返回值类型 函数名 ( 参数列表 ) = 0 ;
virtual void fun( int a ) = 0 ;
包含纯虚函数的类是抽象类，不可实例化对象，比如先被继承
如果子类不重写纯虚函数，那也是抽象类，重写了就能实例化对象了

(纯)虚析构：
父类指针：Base *p = new Son; 用一个父类的指针去指向子类
多态中，父类指针在释放时无法调用到子类的析构代码
如果子类有堆区属性，因一般在析构中释放，那父类指针就无法释放
所以，只有子类需要在析构函数中释放堆区内存时才会用到虚析构
用法：
class A{
public:
    virtual ~A() = 0;  //纯虚析构，类内声明，类外实现
};
A::~A() { cout << "A纯虚析构" << endl; }
class B :public A {
public:
    B(int a) { q = new int(a); }
    int* q;
    ~B() { cout << "B析构" << endl; delete q; }
};
void main(){
    A* p = new B(1);
    delete p;
}

【运算符重载】
可以用全局函数或者成员函数来重载：
全局函数：用a1和a2
1. 类内声明 friend A operator+(A a1,A a2);//否则没法访问私有
2. 类外实现 A operator+(A a1,A a2) { A temp; ... ; return temp; }
成员函数：用this和aa
A operator+(A aa){ A temp; ... ; return temp; }

几个特殊的运算符：
1. 递增++ 成员函数实现，
前置 A& operator++() { i++; return this; } 引用是为了先递增再操作
后置 A operator++(int) { A temp=*this; i++; return temp; } 返回递增前的
2. 关系==,!=,>... 全局函数实现，若类内实现，传入的在后
bool operator==(A a1, A a2){ ... };
3. 赋值= 用于有堆区内存时，因为本身的=不会新开内存，在释放时会出错
A& operator=(A aa) { (判断q空?); q=new int(*aa.q); return *this; } 
输入参数要引用，否则会被此函数释放；返回要引用，为了链式操作
4. 左移<< 用于输入到屏幕，只能全局函数实现，因为不能a<<cout
ostream& operator<<(ostream cout, A& a) { cout<<...  ; return cout }
5. 函数调用运算符()，又叫仿函数，用于记录调用次数等状态，类内实现
void operator()(){ ... }跟普通函数差不多，也可以匿名对象A()()访问


【模板】
函数模板+类模板
通用函数，暂时不指定返回值类型和形参类型
声明模板，T是通用的数据类型，即类型参数化
typename可以换成class
template<typename T>
void fun(...){...} //声明只针对紧跟着的函数
两个方式：
1.自动类型推导 fun(a,b)，输入多变量时要类型一样才能推导出T来，
2.指定类型 fun<>(a,b)，若定义函数时没用到T，那调用时就须随便指定一个

隐式类型转换：比如double或者char自动变成int来运算
会：普通函数、函数模板的显式指定类型。不会：函数模板的自动类型推导(报错)

调用规则：在同时有函数模板和普通函数时
1. 若都能调用(满足调用条件)，优先普通函数，用于针对特定数据类型单独实现
2. 可以通过空模板参数列表fun<>()，来强制调用 函数模板，也就是让它自动推导
3. 函数模板可以重载：比如输入参数的个数不同
4. 若函数模板可以更好的匹配则用函数模板，比如能自动推导就不隐式类型转换

局限性：针对特定数据类型，需要针对性的具体化方法来实现（不运算符重载的话）

类模板：放在类的上面
1. 只能显式指定，不能自动推导，比如A<string,int> a;或者A<> a;
2. 模板参数列表可以有默认参数，比如template<class T1=string, class T2=int>

类模板的成员函数在调用时才创建。若函数本身有错，则编译成功而运行出错

类模板做函数(输入)参数：
template<class T1,class T2>假装换行class A{};
1. 当场指定好：void fun(A<string,int> a){}
2. 参数模板化：template<class T1,class T2>假装换行void fun(A<T1,T2> a){}
3. 整个类模板化：template<class T>假装换行void fun(T a){}

类模板被继承：
或指定父类中T的数据类型(否则无法给子类分配内存)，或子类也是类模板

类模板的成员函数在类外实现：模板<>兼作用域::
template<class T1,class T2>假装换行A<T1,T2>::A(T1 a1, T2 a2){}

类模板分文件写：
不要h和cpp两个文件，声明和实现直接全写在一个hpp文件里面

类模板和友元：注意前后顺序，全局函数的类外实现
template<class T>假装换行class A;  //声明类
template<class T>假装换行void fun(A<T> a);  //声明函数
template<class T>
class A{
    friend void fun<>(A<T> a);  //声明是友元，注意<>表示它是模板函数
}
template<class T>假装换行void fun(A<T> a){...}  //实现函数
如果类内实现的话，跟A共用template，直接写，不用声明但也要加friend

【函数对象】
重载函数调用操作符"()"的类，这种类的对象称为函数对象
也称为“仿函数”，因为用法类似普通函数调用，但它仍是类不是函数
1. 可以有参数和返回值，这同于普通函数
2. 可以有自己的状态，比如调用次数
3. 可以作为函数的输入参数传递，比如配合记录调用次数

谓词：
指返回bool值的函数对象(仿函数)，往往用作输入参数，关键语句pred
若operator()接受1个参数叫一元谓词，接受2个叫二元谓词
一元：bool operator()(int a) { return a>5; }
二元：bool operator()(int a, int b) { return a>b; }

内建函数对象：#include<functional>
分成3种：算术、关系、逻辑，对不同数据类型有不同的运算
1. 算术：
原型：template<class T>假装换行T plus<T>，虽是2元运算但只要1个int
加plus，减minus，乘multiplies，除divides，取模modulus，取反negate
前4种：plus<int> p; int a=p(1,2); //=3
取模：modulus<int> m; int a=m(5,3); //=2
取反：negate<int> n; int a=n(11);//=-11
2. 关系：
大于greater，大于等于greater_equal
小于less，小于等于less_equal
等于equal_to，不等于not_equal_to
3. 逻辑：
与logical_and，或logical_or，非logical_not
注：关系和逻辑一般用于algorithm算法中，因为输入需要是一个对象

【STL】
标准模板库 Standard Template Library
广义上分成：容器container 算法algorithm 迭代器iterator
容器和算法之间通过迭代器进行无缝连接
六大组件：
1. 容器：各种数据结构，vector、list、deque、set、map
2. 算法：sort、find、copy、for_each
3. 迭代器：容器和算法之间的桥梁
4. 仿函数：行为类似函数，可作为算法的某种策略
5. 适配器(配接器)：修饰容器、仿函数或迭代器接口的东西
6. 空间配置器：负责空间的配置与管理

容器：
常用数据结构：数组、链表、树、栈、队列、集合、映射表
序列式容器：强调值的排序
关联式容器：二叉树结构

算法：algorithm
质变算法：运算时候会改变元素内容，如拷贝、替换、删除等
非质变算法：不更改，如查找、计数等

迭代器：
算法用迭代器访问容器，每个容器有专有的迭代器
输入迭代器：只读
输出迭代器：只写
前向迭代器：读写，向前推进
双向迭代器：读写，向前向后
随机访问xx：读写，跳跃访问
