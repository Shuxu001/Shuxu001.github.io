# 获取宁波2019年的天气情况
import requests
from lxml import etree
import json
import pandas

class Nbtq():
    def __init__(self):
        self.myurl =   "http://lishi.tianqi.com/ningbo/2019{}.html"    
        self.month_list = ['01','02','03','04','05','06','07','08','09','10','11','12']
        self.days_dict = {'01':31,'02':28,'03':31,'04':30,
                    '05':31,'06':30,'07':31,'08':31,
                    '09':30,'10':31,'11':30,'12':31
                    }
        self.myheaders = {"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"
             }
        
    def url_respond(self,url):
        print('responding')
        response = requests.get(url,headers=self.myheaders)
        #with open('respond.txt',"w",encoding="utf-8") as f:
        #    f.write(response.content.decode())
        return response.content.decode()
    
    def get_content(self,html_str):
        html_element = etree.HTML(html_str)
        #print(type(html_element))
        no_process = html_element.xpath("/html//ul[@class='thrui']//li//div/text()")
        length = int(len(no_process)/5)
        print('get element:',length)
        date_list=[]
        max_list=[]
        min_list=[]
        tq_list=[]
        feng_list=[]
        for i in range(length):
            date_list.append(no_process[5*i].strip())
            max_list.append(no_process[5*i+1])
            min_list.append(no_process[5*i+2])
            tq_list.append(no_process[5*i+3])
            feng_list.append(no_process[5*i+4])
        return date_list,max_list,min_list,tq_list,feng_list
  
    def save_content(self,tq_dict):
        txtwrite = '{0},{1},{2},{3},{4}\n'
#        with open("nbtq2019.txt","w",encoding="utf-8") as f:
#            f.write(txtwrite.format('日期','最高温','最低温','天气','风'))
#            for i in range(365):
#                f.write(txtwrite.format(tq_dict['date'][i],tq_dict['wd_max'][i],tq_dict['wd_min'][i],tq_dict['tianqi'][i],tq_dict['feng'][i]))
        df = pandas.DataFrame(tq_dict)
        df.to_excel('nbtq2019.xlsx',index=False)        
        print('saved')
    

    def run(self):
        date_list=[]
        max_list=[]
        min_list=[]
        tq_list=[]
        feng_list=[]
        for i in range(12):
            #1.确定url
            url = self.myurl.format(self.month_list[i])
            #2.发送请求，获取响应
            html_str = self.url_respond(url)
            #3.提取数据
            date_list_i,max_list_i,min_list_i,tq_list_i,feng_list_i = self.get_content(html_str)
            print('length_{}:'.format(i+1),len(date_list_i),len(max_list_i),len(min_list_i),len(tq_list_i),len(feng_list_i))
        
            #4.添加到原来的列表后面
            date_list += date_list_i
            max_list += max_list_i
            min_list += min_list_i
            tq_list += tq_list_i
            feng_list += feng_list_i
        #5.用一个字典输出
        nbtq={}
        nbtq["date"] = date_list
        nbtq["wd_max"] = max_list
        nbtq["wd_min"] = min_list
        nbtq["tianqi"] = tq_list
        nbtq["feng"] = feng_list
        #print('length:',len(date_list),len(max_list),len(min_list),len(tq_list),len(feng_list))
        #6.保存到记事本
        self.save_content(nbtq)

        return nbtq

if __name__ == '__main__':
    nbtq = Nbtq()
    nbtq2019_dict=nbtq.run()

# 数据处理部分
import pandas as pd
import numpy as np
from pyecharts.charts import Line,Bar,Pie,Map,Page
from pyecharts import options as opts

filepath='nbtq2019.xlsx'
df = pd.read_excel(filepath)
df.columns = ['date','tmax','tmin','tq','fg']
# 处理文本
df['date'] = pd.to_datetime(df['date'].str.slice(0,10))
df['tq'] = df['tq'].str.replace('阴天','阴')
df['fg'] = df['fg'].str.replace('微风','0级')
df['fx'] = df['fg'].str.slice(0,-2)                     # 风向
df['fl'] = df['fg'].str.slice(-2,-1).astype('int32')    # 风力
df.drop('fg',axis=1,inplace=True)
df['tmax'] = df['tmax'].str.replace('℃','').astype('int32')
df['tmin'] = df['tmin'].str.replace('℃','').astype('int32')
df.set_index('date',inplace=True)

def series2list(s):
    l=[]
    for name in s.index:
        l.append((str(name),int(s[name])))
    return l


# 温度
s_tmax_week = df.groupby(df.index.week)['tmax'].max().round(1)    # 每周最高温
s_tmin_week = df.groupby(df.index.week)['tmin'].min().round(1)    # 每周最低温
df['tdlt']=df['tmax']-df['tmin']    # 每天温差
s_tdlt_week = df.groupby(df.index.week)['tdlt'].mean().round(1) 
x_date = list('第{}周'.format(i) for i in range(1,53))

line = (
    Line(init_opts=opts.InitOpts(width="1300px",height="600px"))
    .add_xaxis(x_date)
    .add_yaxis('温差',s_tdlt_week.tolist())
    .add_yaxis('最高温',s_tmax_week.tolist())
    .add_yaxis('最低温',s_tmin_week.tolist())
    .set_series_opts(label_opts=opts.LabelOpts(is_show=False))
    .set_global_opts(
        title_opts=opts.TitleOpts(title='温度变化'),
        tooltip_opts=opts.TooltipOpts(trigger='axis',axis_pointer_type='cross'),
        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=45))
    ) 
)


# 天气、风向、风力统计
s_tq = df['tq'].value_counts()
s_fx = df['fx'].value_counts()
s_fl = df['fl'].value_counts().sort_index()
s_tq = s_tq.reindex(['晴','多云','阴','小雨','小到中雨','中雨','大雨','暴雨','大暴雨','雾'])
x_tq = s_tq.index.tolist()
y_tq = s_tq.values.tolist()
x_fx = series2list(s_fx)
x_fl = series2list(s_fl)

bar = (
    Bar(init_opts=opts.InitOpts(width="1000px",height="570px"))
    .add_xaxis(x_tq)
    .add_yaxis('天气:天数',y_tq)
    .set_series_opts(
        label_opts=opts.LabelOpts(formatter='{b}:{c}天') 
    )
    .set_global_opts(
        title_opts=opts.TitleOpts(title='天气统计',pos_left='left')
    )
)


pie1 = (
    Pie(init_opts=opts.InitOpts(width="1000px",height="570px"))
    .add('风向:天数',x_fx,radius=['30%','70%'])
    .set_series_opts(
        label_opts=opts.LabelOpts(formatter='{b}:{c}天') 
    )
    .set_global_opts(
        title_opts=opts.TitleOpts(title='风向统计',pos_left='left')
    )
)

for i in x_fl.copy():
    if i[0] == '0':
        x_fl[x_fl.index(i)]=('微风',i[1])
    else:
        x_fl[x_fl.index(i)]=(i[0]+'级',i[1])

pie2 = (
    Pie(init_opts=opts.InitOpts(width="1000px",height="570px"))
    .add('风力:百分比',x_fl,radius=['30%','70%'])
    .set_series_opts(
        label_opts=opts.LabelOpts(formatter='{b}:{d}%') 
    )
    .set_global_opts(
        title_opts=opts.TitleOpts(title='风力统计',pos_left='left')
    )
)


x_map = [
    ('',1),
    
]
map = (
    Map(init_opts=opts.InitOpts(width="1000px",height="570px"))
    .add('宁波',x_map,'宁波')
    .add('舟山',x_map,'舟山')
    .set_global_opts(
        title_opts=opts.TitleOpts(title='地图',pos_left='left')
    )
)
map.render_notebook()


page=Page()
page.add(line,bar,pie1,pie2)
page.render('nbtq2019.html')
